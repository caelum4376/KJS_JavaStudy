-- 2023.05-12 ==> 오라클 (69page)
/*
        => 요구사항 분석 : 기능, 데이터추출
           개념적 설계 => 사용자가 보는 사이트의 데이터 추출
           논리적 설계 => 데이터형을 설정, 관계도 설정(키의 종류)
           물리적 설계 => 데이터형의 크기 결정

        ==> 설계한 내용의 저장공간 => 테이블(릴레이션)
            테이블은 2차원 구조
                     ----------
                     column / row
                        |      |
                     속성명  실제값
        -------------------------------------------------------------------------------
         데이터베이스 용어      DB(실제)        파일시스템          자바
        -------------------------------------------------------------------------------
            릴레이션            테이블          파일                ArrayList
        -------------------------------------------------------------------------------
            스키마             테이블설계      타이틀바            ClassTJFRp
        -------------------------------------------------------------------------------
            인스턴스            ROW값           데이터              객체
        -------------------------------------------------------------------------------
            튜플             행(ROW,RECORD)     한줄                객체 멤버변수 초기화
        -------------------------------------------------------------------------------
            Attribute        열(컬럼)           구분자              멤버변수
        -------------------------------------------------------------------------------

    TABLE
    --------------------------------
        ID      NAME        SEX
    --------------------------------
       aaa      홍길동      남자 
    --------------------------------
       bbb      심청이      여자
    --------------------------------
       ccc      박문수      남자
    --------------------------------
    create table Member {
        id varchar2(10),
        name varchar2(34),
        sex varchar2(4)
    }
    => insert into member values('ccc', '박문수', '남자') => 인스턴스 생성

    ==> 자바의 클래스
    class Member {
        String id, name, sex
    }

    Member park = new Member()
    park.id = "ccc"; park.name = "박문수"; park.sex = "남자";

    73~74page
    속성값 => 데이터값은 단일값을 가진다 => 1정규화
    -------------------------------------------------
        id      name        phone
    -------------------------------------------------
       aaa     홍길동     01011111111  
    -------------------------------------------------
       bbb     심청이     01022222222,01033333333  
    -------------------------------------------------
     ----------         --------------------
      id name               id  phone
     ----------         -------------------- JOIN
     aaa 홍길동           aaa   01011111111     
     ----------         --------------------
     bbb 심청이           bbb   01022222222
     ----------         --------------------
                          bbb   01033333333   
     ----------         --------------------

     속성(컬럼) 서로 다른 이름을 가진다 => 멤버변수
     속성은 순서와 상관이 없다
     테이블안에서는 중복된 튜플은 허용하지 않는다
     aaa 홍길동
     aaa 홍길동 ================> 수정, 삭제 (구분자)
     튜플은 순서와 상관없다
     1 aaa
     2 bbb      => 2 3 7 6.... ==> 메모리에 빈공백에 채운다 ==> ORDER BY (정렬후에 가지고 온다)

     테이블을 만드는 명령어 => DDL
     = CREATE : 생성 (테이블)
     = INSERT : 생서된 테이블에 데이터를 첨부
     = UPDATE : 저장된 데이터를 수정
     = DELETE : 데이터 삭제
     = SELECT : 검색
     ---------------------------------------- 단위 ROW단위

        ***데이터 종류
            = 정형화된 데이터 : 프로그램에서 필요한 데이터만 저장된 것
                => 데이터베이스안에 저장된 데이터
                    제약조건
                        |
                    기본키 : 중복없는 데이터값 => Primary KEY
                    후보키 : 중복없는 데이터값 => NULL허용
                    선택 : 지정된 데이터만 추가 => Check
                    참조키 : 다른 테이블의 해당 값만 사용 => Foreign
                    반드시 입력이 가능하게 만든다 => Not Null
            = 반정형화된 데이터 : 구분만 되어 있는 데이터
                => HTML, XML, JSON
            = 비정형화된 데이터 : 일반 데이터 (필요한 데이터 / 필요없는 데이터)
                => 트위터, 페이스북, 구글...
                   -------------------------- 수집 (빅테이터) => 정형화된 데이터로 변경 


        관계 데이터 모델
        ----------------
         릴레이션 (테이블)
         제약조건
         관계대수 (연산자) => 합집합, 교집합, 차집합, 셀렉션, 디비젼, 프로젝션, 조인
                              UNION INTERSECT MINUS JOIN  

         JOIN ==> Oracle JOIN, ANSI JOIN (표준화)
                              
*/

